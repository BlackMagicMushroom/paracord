#!/bin/bash

#isDarwin
function isDarwin() {
  if [[ `uname -s` -eq 'Darwin' ]]; then
    return 1
  fi

  return 0
}

# if [[ `uname -s` -eq 'Darwin' ]]; then
if [[ isDarwin ]]; then
  ECHO=echo
else
  ECHO=`which echo`
fi

PARACORDDOTDIR=$HOME/.paracord
PARACORDSKELDIR=$PARACORDDIR/skel
PARACORDSKELCPDIR=$PARACORDDIR/skel.cp

function pc_echo() {
    $ECHO -e "${BLUE_BOLD}[Paracord]${NC} ${1} "
}

function pc_displayDirs() {

    echo ""
    if [ $# -lt 1 ]; then
        $ECHO -e "PARACORDDIR:         ${PARACORDDIR}"
        $ECHO -e "PARACORDBINDIR:      ${PARACORDBINDIR}"
        $ECHO -e "PARACORDCORE:        ${PARACORDCORE}"
        $ECHO -e "PARACORDSKELDIR:     ${PARACORDSKELDIR}"
        $ECHO -e "PARACORDSKELCPDIR:   ${PARACORDSKELCPDIR}"
        $ECHO -e "PARACORDSKELCPDIR:   ${PARACORDSKELCPDIR}"
        $ECHO -e "PARACORDDOTDIR:      ${PARACORDDOTDIR}"

    fi

    echo ${!1}
}

function pc_configurePC() {
    pc_echo "${RED_BOLD}Configure web-install script?${NC} (y/n):"
    read CONFIG_REPLY
    if [ `echo $CONFIG_REPLY | tr [:upper:] [:lower:]` = "y" ]; then
        echo "Enter your github username:"
        read GITHUB_USER
        sed -ie "s/BlackMagicMushroom/$GITHUB_USER/" $PARACORDDIR/web_install.sh
        echo ""
        pc_echo "${GREEN_BOLD}[Success]${NC} web_install has been updated. You will need to commit and update your repo."
    fi

    # .gitconfig
    pc_echo "${RED_BOLD}Configure your .gitconfig?${NC} (y/n):"
    read GITCONFIG_REPLY
    if [ `echo $GITCONFIG_REPLY | tr [:upper:] [:lower:]` = "y" ]; then
        echo "Enter your name:"
        read NAME_OF_USER
        sed -ie "s/PC_NAME_OF_USER/$NAME_OF_USER/" $HOME/.gitconfig
        sed -ie "s/PC_NAME_OF_USER/$NAME_OF_USER/" $PARACORDSKELCPDIR/DOT.gitconfig
        echo ""
        echo "Enter your email:"
        read EMAIL_OF_USER
        sed -ie "s/PC_EMAIL_OF_USER/$EMAIL_OF_USER/" $HOME/.gitconfig
        sed -ie "s/PC_EMAIL_OF_USER/$EMAIL_OF_USER/" $PARACORDSKELCPDIR/DOT.gitconfig
        pc_echo "${GREEN_BOLD}[Success]${NC} .gitconfig has been updated. You will need to commit and update your repo."
    fi
}


function pc_help() {
  $ECHO ""
  $ECHO " Available commands: "
  $ECHO "   configure       Configure Paracord repo"
#  $ECHO "   configure-git   Configure .gitconfig with your info"
  $ECHO "   help            Display this dialog"
  $ECHO "   edit {file}     Edit an environment variable file from $PARACORDDOTDIR "
  $ECHO "   install         Performs an install of dot files and environment configuration"
  $ECHO "   status          Returns the (git) status of your Paracord environment"
  $ECHO "   update          Performs an  update of dot files and environment configuration"
  $ECHO "   update-path     Adds ${PARACORDBINDIR} to your path in your .local_env file"
  $ECHO "   variables       Displays Paracord specific variables"
  $ECHO ""
}

# OS Detection
function pc_osdetection {
  OS=$(awk '/DISTRIB_ID=/' /etc/*-release | sed 's/DISTRIB_ID=//' | tr '[:upper:]' '[:lower:]')
  ARCH=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
  VERSION=$(awk '/DISTRIB_RELEASE=/' /etc/*-release | sed 's/DISTRIB_RELEASE=//' | sed 's/[.]0/./')
  
  if [ -z "$OS" ]; then
    OS=$(awk '{print $1}' /etc/*-release | tr '[:upper:]' '[:lower:]')
  fi
  
  if [ -z "$VERSION" ]; then
    VERSION=$(awk '{print $3}' /etc/*-release)
  fi
}



# pc_updateSkelFiles and pc_installSkelFiles should be merged. That is all.
#
# accepts 1 argument location of skel dir
# $PARACORDSKELDIR or $PARACORDSKELCPDIR
#
function pc_updateSkelFiles() {
    # skel files
    PC_ACTION="ln -s"
    TMPSKELDIR=$1
    if [ $TMPSKELDIR = $PARACORDSKELCPDIR ]; then
        PC_ACTION="cp" # if it is the cp dir we want to copy not symlink
    fi

    cd $TMPSKELDIR
    for f in $(ls -d DOT.*)
    do
      NEWFILENAME=`echo $f | sed 's/DOT//'`
      if [ ! -e $HOME/$NEWFILENAME ]; then
         pc_echo "Adding ${LIGHT_GREEN}${NEWFILENAME}${NC}."
         $PC_ACTION $TMPSKELDIR/$f $HOME/$NEWFILENAME
      fi
    done

    for f in $(ls -d --hide=DOT.*)
    do
      if [ ! -e $HOME/$f ]; then
         pc_echo "Adding ${LIGHT_GREEN}${f}${NC}."
         $PC_ACTION $TMPSKELDIR/$f $HOME/$f
      fi
    done

}

# accepts 1 argument location of skel dir
# $PARACORDSKELDIR or $PARACORDSKELCPDIR
#
function pc_installSkelFiles() {
    # skel files
    PC_ACTION="ln -s"
    TMPSKELDIR=$1

    if [ $TMPSKELDIR = $PARACORDSKELCPDIR ]; then
        PC_ACTION="cp" # if it is the cp dir we want to copy not symlink
    fi


    ## For linking/copying skel files to $HOME
    cd $TMPSKELDIR
    for f in $(ls -d DOT.*)
    do
      NEWFILENAME=`echo $f | sed 's/DOT//'`
      if [ -e $HOME/$NEWFILENAME ]; then
         mv $HOME/$NEWFILENAME $HOME/$NEWFILENAME.paracord.bak
      fi
      $PC_ACTION $TMPSKELDIR/$f $HOME/$NEWFILENAME
    done

    ## For linking/copying skel files to ~/.paracord/
    for f in $(ls -d PC.*)
    do
      NEWFILENAME=`echo $f | sed 's/PC\.//'`
      if [ -e $PARACORDDOTDIR/$NEWFILENAME ]; then
         mv $PARACORDDOTDIR/$NEWFILENAME $PARACORDDOTDIR/$NEWFILENAME.paracord.bak
      fi
      $PC_ACTION $TMPSKELDIR/$f $PARACORDDOTDIR/$NEWFILENAME
    done

    for f in $(ls -d */ |  sed '/DOT./d')
    do
      if [ -e $HOME/$f ]; then
         mv $HOME/$f $HOME/${f}.paracord.bak
      fi
      $PC_ACTION $TMPSKELDIR/$f $HOME/$f
    done
}

# git components
function pc_symlinkGitFiles() {
    cd $DOTGITDIR
    for f in $(ls DOT.*)
    do
      NEWFILENAME=`echo $f | sed 's/DOT//'`
      echo $NEWFILENAME
      if [ -e $HOME/$NEWFILENAME ]; then
          mv $HOME/$NEWFILENAME $HOME/$NEWFILENAME.paracord.bak
      fi
      cp $DOTGITDIR/$f $HOME/$NEWFILENAME
    done
}

function pc_setupHomeBinDir() { # // get it home bender XD
    # bin dir
    cd $HOME
    if [ -d $HOME/bin ]; then
       pc_echo "Update your${RED_BOLD} bin/ ${NC}files as needed."
    else
       ln -s $PARACORDDIR/_bin $HOME/_bin
    fi

}

# function not used at this time
# .vim should be included in skel or skel.cp
# .vim dir
function pc_setupVimDir() {
    if [ -d $HOME/.vim ]; then
       pc_echo "You will need to update your .vim folder ${RED_BOLD}manually${NC}."
    else
       ln -s $PARACORDDIR/_vim $HOME/.vim
    fi
}

# UPDATE
function pc_performInstall() {
    
    cd $PARACORDDIR
    PERFORM='install'
    if [ $# -gt 0 ] && [ $1 = "update" ]; then
        GIT=`which git`
        pc_echo "Updating Paracord."
        $GIT pull -q
        PERFORM='update'
    fi

    if [ $PERFORM = 'install' ] && [ -f $PARACORDDOTDIR/.installed ]; then
        pc_echo "You've ${RED_BOLD}already${NC} installed paracord ";
        exit 1;
    fi

    if [[ ! -d $PARACORDDOTDIR ]]; then
      mkdir $PARACORDDOTDIR
    fi

    pc_echo "Adding new skel files."
    cd $PARACORDSKELDIR
    pc_${PERFORM}SkelFiles $PARACORDSKELDIR
    cd $PARACORDSKELCPDIR
    pc_${PERFORM}SkelFiles $PARACORDSKELCPDIR
    
    ############
    #
    # leaving out for now
    # git files are moving to skel
    #
    ############
    # #pc_echo "Adding new git files."
    # # git components
    # #pc_symlinkGitFiles 
        
    pc_echo "Checking for ${PURPLE_BOLD}bin${NC} folder."
    pc_setupHomeBinDir

    ############
    #
    # leaving out for now
    #
    ############
    #pc_echo "Checking for ${PURPLE_BOLD}.vim${NC} folder."
    #pc_setupVimDir

    pc_addParacordToPath

    # move back to PARACORDDIR
    cd $PARACORDDIR

    # pc_addBashCompletion

    touch $PARACORDDOTDIR/.installed
    date +"%Y/%m/%d %H:%I %Z" > $PARACORDDOTDIR/.installed
    
}

function pc_addBashCompletion() {
    #if [[ $- == *i* ]]; then
    #fi
    if [[ -d /etc/bash_completion.d ]]; then
        cp $PARACORDCORE/bash_completion.d/paracord /etc/bash_completion.d/paracord
    fi
    
}

function pc_addParacordToPath() {
    if [ -z "`type -t paracord`" ]; then 
      #fix logic here it sucks
      #
      #pc_echo "${RED_BOLD}Add paracord to your path?${NC} (y/n):"
      #read PC_REPLY
      #if [[ "`echo $PC_REPLY | tr [:upper:] [:lower:]`" = "y" ]]; then
          pc_echo "Updating bash PATH"
          $ECHO -e "" >> $PARACORDDOTDIR/.local_env
          $ECHO -e "# Added by Paracord " >> $PARACORDDOTDIR/local_env
          $ECHO -e "PATH=\$PATH:${PARACORDBINDIR}" >> $PARACORDDOTDIR/local_env
          pc_echo "type . ~/.bashrc for PATH changes to take effect"
      #fi
    fi
}

# update gitconfig
# is this still needed? -bmm
function pc_updateGitConfig() {
    if [ -f $HOME/.gitconfig ]; then
        if [ $1 != 'hush' ]; then
            pc_echo "${RED_BOLD}Configure gitconfig?${NC} (y/n):"
            read REPLY
        fi
        if [ $1 = 'hush'] || [ `echo $REPLY | tr [:upper:] [:lower:]` = "y" ]; then
            echo "Gimme your email address:"
            read PC_EMAIL
            sed -i "s/user\@domain\.com/$PC_EMAIL/" $HOME/.gitconfig
            echo ""
            echo "Gimme your name:"
            read PC_REALNAME
            sed -i "s/UserName/$PC_REALNAME/" $HOME/.gitconfig
            pc_echo "${GREEN_BOLD}[Success]${NC} .gitconfig hath been updated."
        fi
    fi
}

# paracord status
function pc_gitStatus() {
    cd $PARACORDDIR
    git status
}


function pc_editFile() {
  if [ $EDITOR = "" ]; then
    export EDITOR=`which vim`
  fi
  filename=${1}
  if [ "$#" -eq 2 ]; then
    filename="${1}_${2}"
  fi

  if [ -f $HOME/.paracord/${filename} ]; then
    $EDITOR $HOME/.paracord/${filename}
    source $HOME/.paracord/${filename}
  else
    echo "No such file as $1"
  fi

}
